# The Aichemist Codex - Project Restructuring Plan

## Phase 1: Foundation Restructuring (Immediate Focus)

### 1. Adopt `src` Layout

- **Why**: Prevents packaging issues and ensures code behaves consistently
- **Priority**: HIGHEST - Fundamental structural change that will affect all
  other work
- **Tasks**:
  - [ ] Create `src/the_aichemist_codex` directory structure
  - [ ] Move backend modules into this structure
  - [ ] Update imports to use absolute paths
  - [ ] Configure `pyproject.toml` for src layout
  - [ ] Fix broken tests and imports after migration
  - [ ] Create initial CI pipeline to validate the new structure

### 2. Modernize Package Management

- **Why**: Supports the src layout and establishes modern dependencies
- **Priority**: HIGH - Direct complement to src layout migration
- **Tasks**:
  - [ ] Replace `requirements.txt` with `pyproject.toml`
  - [ ] Set up Poetry or PDM for dependency management
  - [ ] Define development vs. production dependencies
  - [ ] Ensure reproducible builds with lockfiles

### 3. Standardize Data Directory

- **Why**: Resolves confusion about data storage locations and supports current
  file tracking/versioning work
- **Priority**: HIGH - Directly supports current Phase 2 focus areas
- **Tasks**:
  - [ ] Implement centralized data directory discovery in `settings.py`
  - [ ] Update all file operations to use this central definition
  - [ ] Add environment variable support for data directory override
  - [ ] Document data directory structure and purpose

## Phase 2: Code Quality Improvements (Short-Term)

### 1. Resolve Circular Dependencies

- **Why**: Improves maintainability and reduces bugs in increasingly complex
  system
- **Priority**: HIGH - Critical for system stability in current development
- **Tasks**:
  - [ ] Run `fix_circular_imports.py` to identify problems
  - [ ] Move shared code to `common.py` modules
  - [ ] Implement dependency injection
  - [ ] Create proper interfaces/abstract base classes

### 2. Modularize Large Files

- **Why**: Improves maintainability and readability for ongoing development
- **Priority**: HIGH - Supports current work on file tracking and monitoring
- **Tasks**:
  - [ ] Split `cli.py` (104KB) into logical submodules
  - [ ] Create proper command structure
  - [ ] Consider using Typer/Click for modern CLI

### 3. Improve Configuration System

- **Why**: Safer, more flexible configuration supports new features
- **Priority**: MEDIUM - Needed for expanding format support and integrations
- **Tasks**:
  - [ ] Create typed configuration schemas
  - [ ] Add validation for all configuration
  - [ ] Support multiple configuration sources
  - [ ] Add configuration documentation

## Phase 3: Architecture Refinement (Medium-Term)

### 1. Define Clear Service Boundaries

- **Why**: Prepares for middleware layer and API development
- **Priority**: MEDIUM - Foundation for Phase 4 API work
- **Tasks**:
  - [ ] Create service interfaces for each functional area
  - [ ] Standardize method signatures and return types
  - [ ] Add proper documentation for all public methods
  - [ ] Create dependency injection container

### 2. Add Domain Models

- **Why**: Improves code clarity and maintainability
- **Priority**: MEDIUM - Supports file relationship mapping work
- **Tasks**:
  - [ ] Create domain models for key entities (Files, Directories, Users)
  - [ ] Replace dictionary returns with proper objects
  - [ ] Add validation to models
  - [ ] Use Pydantic for data validation

### 3. Enhance Testing Infrastructure

- **Why**: Ensures reliability and prevents regressions
- **Priority**: MEDIUM - Critical but can be implemented alongside features
- **Tasks**:
  - [ ] Run tests with `python -Im pytest` in CI
  - [ ] Add integration tests for all critical flows
  - [ ] Implement property-based testing for file operations
  - [ ] Create mock file system for testing

## Phase 4: Refinement and Future-Proofing (Long-Term)

### 1. Modernize Type Annotations

- **Why**: Better static analysis and documentation
- **Priority**: MEDIUM-LOW - Incremental improvement
- **Tasks**:
  - [ ] Update to modern type annotation syntax (Python 3.10+)
  - [ ] Replace `List[T]` with `list[T]`, etc.
  - [ ] Use union syntax `X | Y` instead of `Union[X, Y]`
  - [ ] Leverage `@dataclass` for data-holding classes

### 2. Improve Documentation

- **Why**: Makes the codebase more accessible
- **Priority**: MEDIUM-LOW - Can be improved incrementally
- **Tasks**:
  - [ ] Add docstrings for all public methods
  - [ ] Create architecture documentation
  - [ ] Document service interfaces
  - [ ] Add usage examples

### 3. Prepare for AI Integration

- **Why**: Aligns with Phase 3 of the project roadmap
- **Priority**: MEDIUM - Future focus but requires early planning
- **Tasks**:
  - [ ] Identify integration points for ML models
  - [ ] Design plugin architecture for AI components
  - [ ] Create data processing pipelines for training
  - [ ] Implement model versioning and management

## Timeline and Priority

1. **Immediate Focus** (Next 2 Weeks):

   - Standardize data directory
   - Fix circular dependencies
   - Create service interfaces

2. **Short-term** (1 Month):

   - Adopt src layout
   - Modernize packaging
   - Modularize large files

3. **Medium-term** (2-3 Months):

   - Add domain models
   - Improve configuration
   - Enhance testing

4. **Long-term** (3+ Months):
   - Complete documentation
   - Middleware layer development
   - Frontend/AI integration

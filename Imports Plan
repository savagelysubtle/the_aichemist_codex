# The AIChemist Codex - Circular Imports Resolution Plan

## Architecture Overview

Our new architecture follows a layered structure to prevent circular
dependencies:

```
src/the_aichemist_codex/
├── backend/
│   ├── core/                  # Core interfaces and domain models
│   │   ├── interfaces.py      # Abstract interfaces
│   │   ├── models.py          # Data models
│   │   ├── constants.py       # Constants
│   │   ├── exceptions.py      # Exception classes
│   │   └── utils.py           # Pure utility functions
│   ├── registry.py            # Dependency registry
│   ├── bootstrap.py           # Application initialization
│   ├── cli.py                 # Command-line interface
│   ├── main.py                # Main GUI application entry point
│   ├── infrastructure/        # Concrete implementations of core interfaces
│   │   ├── config/
│   │   │   ├── paths.py
│   │   │   └── config_provider.py
│   │   ├── security/
│   │   │   └── file_validator.py
│   │   └── io/
│   │       └── async_io_impl.py
│   ├── domain/                # Domain-specific modules
│   │   ├── file_reader/
│   │   │   └── file_reader.py
│   │   └── file_writer/
│   │       └── file_writer.py
│   ├── services/              # Service implementations
│   │   ├── cache/
│   │   │   └── cache_manager.py
│   │   ├── file/
│   │   │   └── directory_manager.py
│   │   ├── file_mgmt/
│   │   │   └── file_tree.py
│   │   ├── metadata/
│   │   │   └── metadata_manager.py
│   │   └── search/
│   │       └── search_engine.py
│   └── tools/                 # Utility tools and scripts
│       └── validate_data_dir.py
```

## Import Rules

1. **Core Dependencies**:

   - `core/` modules can only import from standard library and other `core/`
     modules
   - No dependencies on `infrastructure/`, `domain/`, or `services/`

2. **Infrastructure Dependencies**:

   - Can import from `core/` and standard library
   - Can import from `registry.py`
   - No direct dependencies on other `infrastructure/` modules, `domain/`, or
     `services/`

3. **Domain Dependencies**:

   - Can import from `core/` and standard library
   - Can import from `registry.py`
   - No direct dependencies on `infrastructure/` or `services/`

4. **Service Dependencies**:

   - Can import from `core/` and standard library
   - Can import from `registry.py`
   - No direct dependencies on `infrastructure/` or `domain/`

5. **Application Layer Dependencies**:

   - Entry points (cli.py, main.py) and tools can import from any module
   - Should primarily use the Registry to access services
   - Should not directly import from implementation modules when possible

## Completed Components

- [x] Core interfaces (interfaces.py)
- [x] Core models (models.py)
- [x] Core exceptions (exceptions.py)
- [x] Core constants (constants.py)
- [x] Core utilities (utils.py)
- [x] Registry (registry.py)
- [x] Project paths implementation (paths.py)
- [x] Config provider implementation (config_provider.py)
- [x] File validator implementation (file_validator.py)
- [x] Async I/O implementation (async_io_impl.py)
- [x] Directory manager implementation (directory_manager.py)
- [x] Cache manager implementation (cache_manager.py)
- [x] Metadata manager implementation (metadata_manager.py)
- [x] Search engine implementation (search_engine.py)
- [x] File tree implementation (file_tree.py)
- [x] File reader implementation (file_reader.py)
- [x] File writer implementation (file_writer.py)
- [x] Tools: Data directory validator (validate_data_dir.py)
- [x] Main application entry point (main.py)
- [x] Command-line interface (cli.py)

## Next Steps

- [ ] Fix remaining linter errors
- [ ] Port remaining modules from src1:
  - [ ] Project reader
  - [ ] Notification system
  - [ ] Tagging system
  - [ ] Relationship modules
  - [ ] Output formatters
- [ ] Create backward compatibility adapters
- [ ] Add comprehensive tests

# AIChemist Codex Porting Plan

## Modules to Port from Legacy (src1) to New Architecture (src/the_aichemist_codex)

### Already Ported / Implemented

- Core infrastructure (interfaces, exceptions, constants)
- Registry pattern for dependency management
- Bootstrap process
- FileReader implementation
- DirectoryManager implementation
- FileValidator implementation
- AsyncIO implementation
- ConfigProvider implementation
- MetadataManager implementation
- SearchEngine implementation

### Modules to Port Next

1. **Tagging Module**

   - Create `TaggingManager` interface in core/interfaces.py
   - Port functionality from src1/the_aichemist_codex/backend/tagging/manager.py
   - Implement in domain/tagging/tagging_manager.py
   - Add to Registry and bootstrap process

2. **Relationships Module**

   - Create `RelationshipManager` interface
   - Port from src1/the_aichemist_codex/backend/relationships
   - Implement in domain/relationships/relationship_manager.py

3. **Project Reader Module**

   - Create `ProjectReader` interface
   - Port from src1/the_aichemist_codex/backend/project_reader
   - Implement in domain/project_reader/project_reader.py

4. **Output Formatter Module**

   - Create `OutputFormatter` interface
   - Port from src1/the_aichemist_codex/backend/output_formatter
   - Implement in domain/output_formatter/output_formatter.py

5. **Notification Module**

   - Create `NotificationManager` interface
   - Port from src1/the_aichemist_codex/backend/notification
   - Implement in domain/notification/notification_manager.py

6. **Ingest Module**

   - Create `IngestManager` interface
   - Port from src1/the_aichemist_codex/backend/ingest
   - Implement in domain/ingest/ingest_manager.py

7. **Rollback Module**

   - Create `RollbackManager` interface
   - Port from src1/the_aichemist_codex/backend/rollback
   - Implement in domain/rollback/rollback_manager.py

8. **Tools Module**

   - Create interfaces for each tool
   - Port from src1/the_aichemist_codex/backend/tools
   - Implement in domain/tools/

9. **CLI and Main**
   - Update cli.py to use the new architecture
   - Ensure backward compatibility with adapters

## Implementation Strategy

1. For each module:

   - Define interface in core/interfaces.py
   - Create implementation class following Registry pattern
   - Update Registry and bootstrap process
   - Create adapter for backward compatibility (if needed)

2. Follow the layered architecture:

   - Core (interfaces, exceptions, constants)
   - Infrastructure (base implementations)
   - Domain (business logic)
   - Services (composition of domain components)
   - Adapters (for backward compatibility)

3. Testing strategy:
   - Write unit tests for each component
   - Write integration tests for component interactions
   - Ensure backward compatibility

## Priority Order

1. Tagging (handles file classification)
2. Relationships (handles file relationships)
3. Project Reader (used by many components)
4. Ingest and Rollback (core functionality)
5. Output Formatter (for consistent output)
6. Notification (can be implemented later)
7. Tools (specialized tools can be implemented last)
8. CLI (updated last to use all new components)

# AIChemist Codex Porting Progress

## Completed Items

1. **Core Infrastructure**:

   - Ported **main**.py for application entry point
   - Created backend/utils with environment.py for environment detection
   - Set up bin directory with executable scripts (codex and search-tool)

2. **Data Structure**:

   - Created data/ directory with subdirectories (backup, cache, exports, logs,
     trash, versions)
   - Added README.md to explain data directory structure
   - Added placeholder .encryption_key file

3. **CLI Tools**:

   - Added search-tool CLI
   - Set up proper script entries in pyproject.toml

4. **Placeholder Directories**:
   - Created frontend/ and middleware/ directories as placeholders for future
     implementation

## Pending Items

1. **Backend Components**:

   - Need to examine additional backend components in src1 that might need to be
     ported
   - Check for specific implementations in the src1/the_aichemist_codex/backend
     directory

2. **Frontend & Middleware**:

   - Determine if there are specific files in src1/the_aichemist_codex/frontend
   - Determine if there are specific files in
     src1/the_aichemist_codex/middleware

3. **Documentation**:

   - Check for any documentation or additional README files that might need to
     be ported

4. **Tests**:
   - Verify if there are test files that need to be moved from src1

## Next Steps

1. Examine src1/the_aichemist_codex/backend in more detail
2. Check for any content in frontend and middleware directories
3. Verify if there are test files to port
4. Implement any core functionality that might be missing

# AIChemist Codex Porting Analysis

## Comprehensive Porting Status Assessment

### Already Ported Components

1. **Core Framework**

   - ✅ Core interfaces (interfaces.py)
   - ✅ Core models (models.py) - Basic data models
   - ✅ Core exceptions (exceptions.py)
   - ✅ Core constants (constants.py)
   - ✅ Registry pattern implementation (registry.py)
   - ✅ Bootstrap process (bootstrap.py)
   - ✅ Environment detection utilities (utils/environment.py)
   - ✅ Main.py application entry point

2. **Configuration & Infrastructure**

   - ✅ Project paths implementation (infrastructure/paths/project_paths.py)
   - ✅ Config provider implementation
     (infrastructure/config/config_provider.py)
   - ✅ File validator implementation (infrastructure/file/file_validator.py)
   - ✅ Async I/O implementation (infrastructure/io/async_io_impl.py)

3. **File System Services**

   - ✅ Directory manager implementation (services/file/directory_manager.py)
   - ✅ File tree implementation (services/file_mgmt/file_tree.py)
   - ✅ File reader implementation (domain/file_reader/file_reader.py)
   - ✅ File writer implementation (domain/file_writer/file_writer.py)

4. **Data Management**

   - ✅ Cache manager implementation (services/cache/cache_manager.py)
   - ✅ Metadata manager implementation (services/metadata/metadata_manager.py)

5. **Search System**

   - ✅ Search engine implementation (domain/search/search_engine.py)
   - ✅ Search providers (domain/search/providers/)
   - ✅ Index manager implementation (domain/search/index_manager.py)

6. **Application & CLI**

   - ✅ Command-line interface core (cli.py)
   - ✅ Search tool CLI (cli/search_tool.py)
   - ✅ Executable scripts (bin/codex, bin/search-tool)

7. **Data Structure**
   - ✅ Data directory structure (data/\*)
   - ✅ Encryption key placeholder (.encryption_key)

### Components Remaining to be Ported

1. **Tagging System** (✓ COMPLETED)

   - ✅ TaggingManager interface and implementation
   - ✅ Tag models and utilities
   - ✅ Additional Components:
     - ✅ TagHierarchy for hierarchical organization of tags
     - ✅ TagClassifier for ML-based automatic tagging
     - ✅ TagSuggester for intelligent tag recommendations
   - ✅ Source: src1/the_aichemist_codex/backend/tagging/
   - ✅ Target: src/the_aichemist_codex/backend/domain/tagging/

2. **Relationships System** (High Priority)

   - ❌ RelationshipManager interface and implementation
   - ❌ Relationship models and utilities
   - ❌ Source: src1/the_aichemist_codex/backend/relationships/
   - ❌ Target: src/the_aichemist_codex/backend/domain/relationships/

3. **Project Reader** (High Priority)

   - ❌ ProjectReader interface and implementation
   - ❌ Project models and utilities
   - ❌ Source: src1/the_aichemist_codex/backend/project_reader/
   - ❌ Target: src/the_aichemist_codex/backend/domain/project_reader/

4. **File Manager** (High Priority)

   - ❌ FileManager interface and implementation (beyond FileReader/Writer)
   - ❌ File management utilities
   - ❌ Source: src1/the_aichemist_codex/backend/file_manager/
   - ❌ Target: src/the_aichemist_codex/backend/domain/file_manager/

5. **Rollback System** (Medium Priority)

   - ❌ RollbackManager interface and implementation
   - ❌ Version history and restoration logic
   - ❌ Source: src1/the_aichemist_codex/backend/rollback/
   - ❌ Target: src/the_aichemist_codex/backend/domain/rollback/

6. **Notification System** (Medium Priority)

   - ❌ NotificationManager interface and implementation
   - ❌ Notification models and delivery mechanisms
   - ❌ Source: src1/the_aichemist_codex/backend/notification/
   - ❌ Target: src/the_aichemist_codex/backend/domain/notification/

7. **Output Formatter** (Medium Priority)

   - ❌ OutputFormatter interface and implementation
   - ❌ Format converters and renderers
   - ❌ Source: src1/the_aichemist_codex/backend/output_formatter/
   - ❌ Target: src/the_aichemist_codex/backend/domain/output_formatter/

8. **Ingest System** (Medium Priority)

   - ❌ IngestManager interface and implementation
   - ❌ Import and data processing utilities
   - ❌ Source: src1/the_aichemist_codex/backend/ingest/
   - ❌ Target: src/the_aichemist_codex/backend/domain/ingest/

9. **Additional Models** (Medium Priority)

   - ❌ Any domain-specific models from src1/the_aichemist_codex/backend/models/
   - ❌ Target: Integration into appropriate modules or core/models.py

10. **Tools and Utilities** (Lower Priority)

    - ❌ Additional utility tools from src1/the_aichemist_codex/backend/tools/
    - ❌ Target: src/the_aichemist_codex/backend/tools/

11. **Configuration Templates** (Lower Priority)

    - ❌ Environment configuration templates (.env.template)
    - ❌ Target: src/the_aichemist_codex/.env.template or docs/

12. **Additional Utilities** (Lower Priority)

    - ❌ Any additional utility modules from
      src1/the_aichemist_codex/backend/utils/
    - ❌ Target: src/the_aichemist_codex/backend/utils/

13. **Testing Infrastructure** (Lower Priority)
    - ❌ Test configuration (pytest.ini)
    - ❌ Test utilities and fixtures
    - ❌ Target: src/tests/ or project root

## Porting Challenges and Considerations

1. **Dependency Management**

   - Ensure all dependencies are properly resolved in the new architecture
   - Use the Registry pattern to prevent circular imports
   - Map old direct imports to Registry-based access

2. **Interface Alignment**

   - Ensure all implementations properly implement their interfaces
   - Add any missing methods to interfaces
   - Maintain backward compatibility where possible

3. **Asynchronous Support**

   - Ensure consistent use of async/await throughout the codebase
   - Convert synchronous code to asynchronous where appropriate

4. **Error Handling**

   - Use the exception hierarchy consistently
   - Properly propagate and handle errors
   - Add appropriate logging

5. **Configuration**
   - Ensure configuration values are properly migrated
   - Update default configuration values if needed

## Recommended Porting Order

1. High Priority (Core Functionality)

   - Tagging System
   - Relationships System
   - Project Reader
   - File Manager

2. Medium Priority (Supporting Systems)

   - Rollback System
   - Notification System
   - Output Formatter
   - Ingest System
   - Additional Models

3. Lower Priority (Utilities and Configuration)
   - Tools and Utilities
   - Configuration Templates
   - Additional Utilities
   - Testing Infrastructure

---
description: Enforces consistent Python code style.
globs: **/*.py
alwaysApply: false
---
# Code Style & Formatting

## 1. Linting & Formatting
- Use **Ruff** for linting and auto-fixes:
  ```bash
  ruff check . --fix
  ```
- Use **Ruff format** for code formatting:
  ```bash
  ruff format .
  ```
- Use **mypy** for static type checking with strict mode:
  ```bash
  mypy --strict .
  ```

## 2. Modern Tooling
- Use **uv** for faster package installation:
  ```bash
  uv pip install ruff mypy
  ```
- Configure tools in `pyproject.toml`:
  ```toml
  [tool.ruff]
  line-length = 88
  target-version = "py310"  # Target Python 3.10+
  extend-exclude = [".venv", "build", "dist", "__pycache__"]
  select = ["E", "F", "B", "A", "I", "N", "UP", "ANN", "S", "BLE", "FBT", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
  ignore = []

  [tool.ruff.format]
  quote-style = "double"
  indent-style = "space"
  line-ending = "auto"

  [tool.mypy]
  python_version = "3.10"
  warn_return_any = true
  warn_unused_configs = true
  disallow_untyped_defs = true
  disallow_incomplete_defs = true
  check_untyped_defs = true
  disallow_untyped_decorators = true
  no_implicit_optional = true
  strict_optional = true
  ```

## 3. Naming Conventions
- Use `snake_case` for variables, functions, and modules.
- Use `PascalCase` for classes.
- Use `UPPER_CASE` for constants.
- Prefix private methods and attributes with a single underscore (`_`).
- Use meaningful, descriptive names - code should be self-documenting.

## 4. Modern Type Annotations
- Use Python 3.10+ type annotation syntax:
  ```python
  # Preferred (Python 3.10+)
  def process_items(items: list[str]) -> dict[str, int]: ...

  # Avoid (legacy syntax)
  from typing import Dict, List
  def process_items(items: List[str]) -> Dict[str, int]: ...
  ```
- Use union type syntax:
  ```python
  # Preferred (Python 3.10+)
  def get_value(key: str) -> str | int | None: ...

  # Avoid (legacy syntax)
  from typing import Optional, Union
  def get_value(key: str) -> Optional[Union[str, int]]: ...
  ```
- Use `@dataclass` for data-holding classes:
  ```python
  from dataclasses import dataclass

  @dataclass
  class User:
      name: str
      age: int
      is_active: bool = True
  ```

## 5. Line Length & Formatting
- Keep lines under 88 characters.
- Break long lines at logical points.
- Use parentheses to wrap multi-line expressions:
  ```python
  # Long function calls
  result = my_function(
      arg1,
      arg2,
      keyword_arg=value,
  )

  # Long f-strings
  message = (
      f"Prefix: {value1}"
      f" - Additional info: {value2}"
  )
  ```
- Use trailing commas in multi-line structures.

## 6. Imports
- Organize imports in three groups, separated by a blank line:
  1. Standard library imports
  2. Third-party imports
  3. Local application imports
- Use `import` statements for packages and modules.
- Use `from ... import` for classes, functions, and attributes.
- Avoid wildcard imports (`from module import *`).
- Ensure imports are sorted with `ruff`.

## 7. Modern Python Features
- Use f-strings for string formatting:
  ```python
  # Good
  name = "John"
  greeting = f"Hello, {name}!"

  # Avoid
  greeting = "Hello, {}!".format(name)
  greeting = "Hello, %s!" % name
  ```
- Use `pathlib` instead of `os.path`:
  ```python
  # Good
  from pathlib import Path
  config_path = Path("config") / "settings.yaml"

  # Avoid
  import os.path
  config_path = os.path.join("config", "settings.yaml")
  ```
- Use context managers for resource management:
  ```python
  # Good
  with open("file.txt") as f:
      content = f.read()

  # Avoid
  f = open("file.txt")
  content = f.read()
  f.close()
  ```

## 8. Comments and Documentation
- Write docstrings for all public modules, functions, classes, and methods.
- Use Google or NumPy docstring style consistently.
- Keep comments current when code changes.
- Focus comments on why, not what (code should be self-explanatory).
- Add type annotations instead of describing types in docstrings.

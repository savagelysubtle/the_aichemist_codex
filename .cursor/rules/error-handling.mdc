---
description: Defines best practices for error handling and logging.
globs: **/*.py
alwaysApply: false
---
# Error Handling & Logging Guidelines

## 1. Exception Handling
- Always raise **meaningful exceptions** with context:
  ```python
  raise ValueError(f"Invalid user ID {user_id}. Expected integer, got {type(user_id)}")
  ```
- Catch specific exceptions rather than generic `Exception` where possible.
- Use custom exception classes for better debugging and error classification.
- Structure try/except blocks to catch the narrowest scope possible.

## 2. Defensive Programming
- Validate inputs at function boundaries.
- Check for None values before operations that could fail.
- Implement defensive import handling for optional dependencies:
  ```python
  try:
      import importlib.util
      spec = importlib.util.find_spec("optional_module")
      if spec is not None:
          optional_module = importlib.import_module("optional_module")
          if hasattr(optional_module, "RequiredClass"):
              class_ref = getattr(optional_module, "RequiredClass")
              # Use class_ref safely...
          else:
              logger.warning("Required class not found in module")
      else:
          logger.warning("Optional module not available")
  except Exception as e:
      logger.warning(f"Failed to import optional module: {e}")
  ```

## 3. Structured Logging
- Use structured logging (structlog or logging).
- Include context in log messages (request ID, user ID, timestamp).
- Use appropriate log levels:
  - DEBUG: Detailed debugging information
  - INFO: Confirmation that things are working as expected
  - WARNING: Something unexpected happened, but the application still works
  - ERROR: Something failed, but the application can continue
  - CRITICAL: Application is unusable
- Ensure logs are machine-readable for monitoring tools.

## 4. Error Recovery
- Design systems to recover gracefully from errors.
- Implement fallback mechanisms for critical functionality.
- Use circuit breakers for external services that might fail.
- Consider retry logic with exponential backoff for transient failures.

The central logger for the project is located in [logging_config.py](mdc:backend/src/config/logging_config.py).

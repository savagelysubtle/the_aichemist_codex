---
description: Enforces AI-friendly coding practices for readability and maintainability
globs: **/*.py"
alwaysApply: false
---
# AI-Friendly Code Practices

## 1. Code Readability
- Use **descriptive variable and function names** that clearly convey purpose.
- Write **clear and concise comments** for complex logic.
- Maintain consistent indentation and formatting.
- Limit line length to 88 characters to improve readability.
- Split complex expressions into smaller, self-explanatory parts.

## 2. Type Hints & Docstrings
- Always include type hints (`str`, `list[int]`, `Optional[Dict[str, Any]]`).
- Prefer specific types over `Any` whenever possible.
- For generic parameters, use `object` instead of `Any` (e.g., `*args: object`).
- Always annotate return types, including `-> None` for functions with no return value.
- Document functions with Google-style docstrings:

def fetch_data(url: str) -> dict:
    """Fetches JSON data from a given URL.

    Args:
        url (str): The API endpoint.

    Returns:
        dict: Parsed JSON response.
    """

## 3. Naming Conventions
- Use `snake_case` for variables, functions, and methods.
- Use `PascalCase` for classes.
- Use `UPPER_CASE` for constants.
- Use underscore (`_`) for unused loop variables.
- Prefix private methods and attributes with a single underscore (`_`).

## 4. Code Organization
- Break down complex functions into smaller, single-purpose functions.
- Group related functionality into classes or modules.
- Organize imports logically (stdlib, third-party, local).
- Use meaningful file and directory names that reflect their contents.

## 5. Error Handling
- Use explicit error handling with try/except blocks.
- Catch specific exceptions rather than generic ones.
- Include informative error messages.
- Implement defensive programming for external dependencies.

## 6. Consistent Patterns
- Maintain consistent patterns for similar operations.
- Use the same approach for handling common tasks (e.g., file I/O, API calls).
- Follow established design patterns appropriate to the problem domain.

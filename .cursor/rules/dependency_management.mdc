---
description: Establishes best practices for dependency management.
globs: **/pyproject.toml,**/requirements.txt,**/setup.py
alwaysApply: false
---
# Dependency Management Guidelines

## 1. Modern Package Management
- Use **pyproject.toml** for package configuration:
- Use *or **uv** for dependency management.
- Keep dependencies **pinned** in `pyproject.toml`
- Regularly update dependencies using:
  ```bash
  uv pip upgrade --all
  ```

## 2. Environment Isolation
- Always create virtual environments with `uv venv`.
- Activate virtual environments consistently:

  - `.venv\Scripts\activate` (Windows)

## 3. Project Metadata
- Use `pyproject.toml` to explicitly define project metadata:
  ```toml
  [project]
  name = "my_project"
  version = "0.1.0"
  description = "Project description"
  requires-python = ">=3.8"
  dependencies = []
  ```

## 4. Build System Configuration
- Set the build system explicitly to use uv:
  ```toml
  [build-system]
  requires = ["uv"]
  build-backend = "uv.build"
  ```

## 5. Optional Dependencies
- Clearly document optional dependencies with their purpose:
  ```toml
  [project.optional-dependencies]
  dev = ["pytest>=7.0.0", "mypy>=1.0.0"]
  docs = ["sphinx>=4.0.0"]
  ```

## 6. Defensive Dependency Handling
- Implement defensive programming for optional package imports:
  ```python
  try:
      import importlib.util
      spec = importlib.util.find_spec("optional_package")
      if spec is not None:
          optional_package = importlib.import_module("optional_package")
      else:
          logger.warning("Optional package not found")
  except Exception as e:
      logger.warning(f"Failed to import optional package: {e}")
  ```

## 7. Requirements Documentation
- Document specific version requirements with reasons:
  ```
  # Core dependencies
  asyncio>=3.4.3  # For async/await support
  aiohttp>=3.8.1  # For async HTTP client
  ```

[project]
# Recommendation: Ensure all dependencies are actively used (consider running `deptry` tool regularly).
dependencies = [
  # Core Dependencies
  "EbookLib>=0.17.1",
  "Kreuzberg>=0.1.0",
  "PyYAML>=6.0.1",
  "aiofiles>=24.1.0",
  "aiohttp>=3.8.5",
  "annotated-types>=0.7.0",
  "anyio>=4.8.0",
  "asyncio>=3.4.3",
  "attrs>=25.1.0",
  "click>=8.1.8",
  "colorama>=0.4.6",
  # Recommendation: Consider consolidating config sources. Dynaconf might be useful,
  # or simplify using python-dotenv + tomli/pyyaml for a single app config file.
  "dynaconf>=3.2.10",
  "ezdxf>=1.0.0",
  "fastjsonschema>=2.21.1",
  "importlib_metadata>=8.6.1",
  "iniconfig>=2.0.0",
  "jsonschema-specifications>=2024.10.1",
  "jsonschema>=4.23.0",
  "jupyter_core>=5.7.2",
  "lxml>=4.9.3",
  "mutagen>=1.47.0",
  "nbformat>=5.10.4",
  "odfpy>=1.4.1",
  "openpyxl>=3.1.0",
  "packaging>=24.2",
  "pandas>=2.0.0",
  "platformdirs>=4.3.6",
  "pluggy>=1.5.0",
  "psutil>=7.0.0",
  "pydantic>=2.10.6",
  "pydantic_core>=2.27.2",
  "pydub>=0.25.1",
  "pymediainfo>=6.0.1",
  "ffmpeg-python>=0.2.0",
  "pypdf>=3.17.1",
  "python-docx>=0.8.11",
  "python-dotenv>=1.0.1",
  "python-magic-bin>=0.4.14; sys_platform == 'win32'",
  "rarfile>=4.0",
  "rapidfuzz>=2.15.1",
  "referencing>=0.36.2",
  "reportlab>=4.0.4",
  "rich>=13.6.0",
  "rpds-py>=0.23.1",
  "setuptools>=75.8.0",
  # Recommendation: Standardize logging on structlog or loguru.
  "structlog>=25.1.0",
  "loguru>=0.7.2",
  "tabulate>=0.9.0",
  "tenacity>=9.0.0",
  "tiktoken>=0.5.1",
  "tomli>=2.0.1",
  "traitlets>=5.14.3",
  "typing_extensions>=4.12.2",
  "watchdog>=3.0.0",
  "whoosh>=2.7.4",
  "xmltodict>=0.13.0",
  "zipp>=3.21.0",
  # Graph & Visualization (for Relationship Mapping)
  "networkx>=3.1",
  "pydot>=1.4.2",
  "matplotlib>=3.7.1",
  # AI & NLP
  "sentence-transformers>=2.2.2",
  "faiss-cpu>=1.7.4", # Use faiss-gpu if GPU is available and desired
  "scikit-learn>=1.3.0",
  "numpy>=1.24.0",
  "pytesseract>=0.3.10",
  "openai>=1.3.5",
  # Search & Indexing
  "sqlite-utils>=3.36.0",
  "sqlalchemy>=2.0.23", # Consider using SQLAlchemy's async features
  "fastapi>=0.111.0",
  # Security & Compliance
  "cryptography>=41.0.7",
  "pyjwt>=2.7.0",
  "bcrypt>=4.1.2",
  "casbin>=1.38.0",
  "py7zr>=0.22.0",
  "aiosqlite>=0.21.0",
  "python-magic>=0.4.27",
  "python-magic-bin>=0.4.14", # Redundant with the platform-specific one? Check usage.
  "mcp[cli]>=1.6.0",
  "httpx",
  "fastmcp>=0.4.1",
  "gitpython>=3.1.44",
  "deptry>=0.23.0",
  "defusedxml>=0.7.1",
  "pre-commit>=4.2.0",
]
description = "A modular file and project management system."
name = "the_aichemist_codex"
readme = "README.md"
# Recommendation: Stick to Python 3.13 if absolutely needed, otherwise consider supporting older active versions (e.g., 3.11+) for wider compatibility.
requires-python = ">=3.13.0"
version = "0.1.0" # Recommendation: Increment version after these changes (e.g., 0.2.0 or 0.1.1)

  # Recommendation: This is the standard way to define optional dependencies (including 'dev')
  [project.optional-dependencies]
  dev = [
    "Pygments>=2.18.0",
    "black>=24.8.0", # redundant if using ruff format
    "build>=1.2.1",
    "codecov>=2.1.13",
    "ffmpeg-python>=0.2.0",
    "ipykernel>=6.29.5",
    "ipython>=8.18.1",
    "isort>=5.13.2", # redundant if using ruff --fix
    "mypy-extensions>=1.0.0",
    "mypy>=1.11.1",
    "nbqa>=1.8.7",
    "mkdocs-material>=9.5.33",
    "mkdocs>=1.6.0",
    "mkdocstrings-python>=1.10.8",
    "mkdocstrings>=0.25.2",
    "pre-commit>=3.8.0",
    "pymediainfo>=6.0.1",
    "pytest-asyncio>=0.25.3",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.4",
    "pydeps>=1.12.17",
    "graphviz>=0.20.1",
    "types-aiofiles>=23.2.0.0",
    "types-networkx>=3.1.0.0",
    "types-pywin32>=306.0.0.0",
    "ruff>=0.11.2", # Use a consistent version with pre-commit if possible
    "setuptools>=73.0.1",
    "sphinx-autodoc-typehints>=1.22.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx>=6.2.1",
    "sphinxcontrib-mermaid>=0.9.2",
    "twine>=5.1.0",
    "virtualenv>=20.26.3",
    "safety", # Recommendation: Add safety for dependency vulnerability checks
  ]

# Recommendation: Remove this non-standard section. UV respects [project.optional-dependencies].
# [dependency-groups]
# dev = [
#   ... (Content removed as it duplicates optional-dependencies) ...
# ]

  [project.scripts]
  # Recommendation: Ensure these entry points exist and are correct.
  # 'codex = "the_aichemist_codex.backend.cli:main"' assumes 'backend' exists. The structure shows 'interfaces.cli.cli:cli_app'.
  # Verify 'docs.build_docs:main' and 'the_aichemist_codex.cli.search_tool:main'.
  codex       = "the_aichemist_codex.interfaces.cli.cli:cli_app" # Corrected based on provided structure
  docs-build  = "the_aichemist_codex.scripts.build_docs:main" # Assuming a build script exists in scripts/
  search-tool = "the_aichemist_codex.interfaces.cli.commands.search:main" # Example, adjust if a dedicated script exists

[build-system]
build-backend = "uv_build"
requires      = [ "uv-build>=0.6.0,<0.7" ]

[tool.setuptools.packages.find]
include = [ "the_aichemist_codex*" ]
where   = [ "src" ]

[tool.pytest.ini_options]
addopts = "--basetemp=./tmp"
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
filterwarnings = [ "ignore::DeprecationWarning", "ignore::PendingDeprecationWarning" ]
markers = [
  "asyncio: mark a test as an asyncio test",
  "metadata: mark a test relating to metadata extraction",
  "unit: mark a test as a unit test",
  "file_operations: mark a test relating to file operations",
  "tagging: mark a test relating to tagging",
  "search: mark a test relating to search functionality",
  # "unit: Unit tests", # Duplicate marker
  "integration: Integration tests",
  "slow: Tests that take longer to run",
]
python_classes = [ "Test*" ]
python_files = [ "test_*.py" ]
python_functions = [ "test_*" ]
pythonpath = [ "src" ]
testpaths = [ "tests" ]
tmp_path_retention_count = 2
tmp_path_retention_policy = "failed"

[tool.ruff]
# Recommendation: Explicitly include 'tests' directory if not covered by src/**/
include = [ "pyproject.toml", "src/**/*.py", "tests/**/*.py", "scripts/**/*.py" ]

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
indent-width = 4
line-length  = 88
target-version = "py313" # Match requires-python

  [tool.ruff.lint]
  dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
  fixable = [ "ALL" ]
  # Recommendation: Add more checks gradually (e.g., D for docstrings, SIM for simplification)
  select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ANN", # flake8-annotations (Consider ANN001, ANN201 carefully based on project style)
    "S",   # flake8-bandit (Security)
    "A",   # flake8-builtins
    "RUF", # Ruff-specific rules
  ]
  unfixable = [  ]
  # Recommendation: Consider ignoring specific rules if they conflict with project style, e.g.,
  # ignore = ["ANN101", "ANN102"] # Self/cls type hints can be verbose

  # ADDED per-file-ignores as a separate, non-indented table
  [tool.ruff.lint.per-file-ignores]
  "*/__init__.py" = [
    "F401", # Allow unused imports in __init__ files
  ]
  "tests/**/*.py" = [
    "S101",   # Allow asserts in tests
    "ANN",    # Be less strict with type hints in tests if desired
    "F821",   # Allow undefined names (useful for fixtures)
    "F823",   # Allow potentially undefined names
  ]
  "src/the_aichemist_codex/infrastructure/config/manager.py" = ["ANN401"] # Example: Allow Any in specific legacy/complex files

  [tool.ruff.format]
  docstring-code-format      = true
  docstring-code-line-length = "dynamic"
  indent-style               = "space"
  line-ending                = "auto"
  quote-style                = "double"
  skip-magic-trailing-comma  = false


[tool.mypy]
allow_redefinition          = false
allow_untyped_globals       = false
check_untyped_defs          = true
disallow_incomplete_defs    = false
disallow_untyped_decorators = false
disallow_untyped_defs       = false
ignore_missing_imports      = true
local_partial_types         = true
python_version              = "3.13"
warn_no_return              = true
warn_redundant_casts        = true
warn_unused_ignores         = true

  [[tool.mypy.overrides]]
  check_untyped_defs    = false
  disallow_untyped_defs = false
  module                = "docs.*"

  [[tool.mypy.overrides]]
  check_untyped_defs    = false
  disallow_untyped_defs = false
  module                = "tests.*"

[tool.pydeps]
cluster   = true  # Group modules from the same package
max_bacon = 2     # Maximum dependency distance to include
reverse   = false # Show reverse dependencies

# Exclude standard library modules
exclude = [
  # Standard library
  "re",
  "os",
  "sys",
  "collections",
  "typing",
  "json",
  "time",
  "datetime",
  "pathlib",
  "uuid",
  "logging",
  "abc",
  "inspect",
  "functools",
  "itertools",
  "importlib",
  "shutil",
  "tempfile",
  "warnings",
  "weakref",
  "contextlib",
  "subprocess",
  "multiprocessing",
  "threading",
  "argparse",
  "traceback",

  # External libraries (common ones that add noise)
  "numpy.*",
  "pandas.*",
  "matplotlib.*",
  "setuptools.*",
  "aiohttp.*",
  "asyncio.*",
  "pydantic.*",
  "click.*",
  "rich.*",
  "sqlalchemy.*",

  # Virtual environment paths
  ".venv.*",
  "site-packages.*",
  "dist-packages.*",

  # Test modules/directories
  "*test*",
  "*tests*",
  "*pytest*",
  "*mock*",
  "*conftest*",

  # Build/documentation related
  "docs.*",
  "build.*",
  "dist.*",
  "sphinx.*",
  "*setup*",
]

# Additional PyDeps options for better visualization
max_module_depth = 4    # Limit module depth for readability
min_cluster_size = 2    # Minimum number of nodes to form a cluster
noise_level      = 1000 # High value to avoid excluding nodes

[tool.uv]
# Valid UV-specific configuration options
required-version = ">=0.6.0"
# Fix configuration for handling file locking issues on Windows
cache-dir = "./.uv_cache"
index-url = "https://pypi.org/simple/"


# Migrated from .markdownlint.json
[tool.markdownlint]
MD001   = false # Header levels should only increment by one level
MD013   = false # Line length
MD026   = false # Trailing punctuation in header
MD033   = false # Inline HTML
MD036   = false # Emphasis used as header
MD041   = false # First line should be a top-level header
default = true

# Migrated from cspell.config.yaml
[tool.cspell]
dictionaries           = [  ]
dictionary-definitions = [  ]
ignore-paths           = [  ]
ignore-words           = [  ]
imports                = [  ]
version                = "0.2"
words                  = [  ]

# Migrated from .pre-commit-config.yaml - partial migration as some features
# are better kept in the original format for pre-commit
[tool.pre-commit]
default_language_version = { python = "python3" }

# Note: The hooks configuration isn't fully supported in pyproject.toml
# and should remain in .pre-commit-config.yaml for compatibility
